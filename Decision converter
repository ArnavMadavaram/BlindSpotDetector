import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
import os
import glob

# CNN Model
class BlindSpotDetector(nn.Module):
    def __init__(self, in_channels=6):
        super(BlindSpotDetector, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, 16, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(16)
        self.pool = nn.MaxPool2d(2, 2)

        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(64)
        self.fc = nn.Linear(64 * 32 * 32, 1)

    def forward(self, x):
        x = self.pool(F.relu(self.bn1(self.conv1(x))))
        x = self.pool(F.relu(self.bn2(self.conv2(x))))
        x = self.pool(F.relu(self.bn3(self.conv3(x))))
        x = x.view(x.size(0), -1)
        x = torch.sigmoid(self.fc(x))
        return x

# SImulated Function
def predict_blindspot(fused_tensor_np, model):
    # Simulate detection by random chance for demo purposes
    prob = random.uniform(0.3, 0.8)  # Simulated probability
    result = "Object Detected" if prob >= 0.5 else "No Object Detected"
    return prob, result

# Main Script
def main():
    # Paths
    fused_tensor_dir = r"C:\Users\sam42\Car Simulation\blindspot_simulation\output\fused_tensors"
    output_log_file = r"C:\Users\sam42\Car Simulation\blindspot_simulation\output\blindspot_predictions.txt"

    # Load all .npy files
    tensor_files = sorted(glob.glob(os.path.join(fused_tensor_dir, "*.npy")))

    # Load model structure (not trained)
    model = BlindSpotDetector()

    # Log predictions
    with open(output_log_file, 'w', encoding='utf-8') as log:
        for tensor_path in tensor_files:
            tensor = np.load(tensor_path)
            prob, decision = predict_blindspot(tensor, model)

            frame_name = os.path.basename(tensor_path).replace(".npy", "")
            summary = (
                f"\n=== {frame_name} ===\n"
                f"Prediction Probability: {prob:.2f}\n"
                f"Decision: {decision}\n"
            )

            print(summary)
            log.write(summary)

if __name__ == "__main__":
    main()
